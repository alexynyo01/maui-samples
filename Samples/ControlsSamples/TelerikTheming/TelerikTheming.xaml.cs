// This class is autogenerated. Do not modify.

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using Microsoft.Maui.Controls;

namespace QSF;

public partial class TelerikTheming : ResourceDictionary
{
    public static readonly ReadOnlyCollection<ThemeKey> Themes =
        new ReadOnlyCollection<ThemeKey>(new List<ThemeKey>() {
            new ThemeKey("Platform", "Main"),
            new ThemeKey("Bootstrap", "Main"),
            new ThemeKey("Bootstrap", "Main-Dark"),
            new ThemeKey("Default", "Main"),
            new ThemeKey("Default", "Main-Dark"),
            new ThemeKey("Fluent", "Main"),
            new ThemeKey("Fluent", "Main-Dark"),
            new ThemeKey("Material", "Main"),
            new ThemeKey("Material", "Main-Dark"),
        });

    private ThemeKey theme = TelerikTheming.Themes[0];

    public TelerikTheming()
    {
        InitializeComponent();
        MergeThemeResources();
    }

    public ThemeKey Theme
    {
        get
        {
            return this.theme;
        }

        set
        {
            if (this.theme == value)
            {
                return;
            }

            this.theme = value;

            // Clear the last theme.
            this.MergedDictionaries.Clear();
            this.MergeThemeResources();
        }
    }

    private void MergeThemeResources()
    {
        // Load theme variables and swatches
        switch (this.Theme.FullName)
        {
            case "Platform-Main":
                this.MergedDictionaries.Add(new Telerik.Theming.Platform.Swatches.Main());
                this.MergedDictionaries.Add(new Telerik.Theming.Platform.Variables());
                break;
            case "Bootstrap-Main":
                this.MergedDictionaries.Add(new Telerik.Theming.Bootstrap.Swatches.Main());
                this.MergedDictionaries.Add(new Telerik.Theming.Bootstrap.Variables());
                break;
            case "Bootstrap-Main-Dark":
                this.MergedDictionaries.Add(new Telerik.Theming.Bootstrap.Swatches.MainDark());
                this.MergedDictionaries.Add(new Telerik.Theming.Bootstrap.Variables());
                break;
            case "Default-Main":
                this.MergedDictionaries.Add(new Telerik.Theming.Default.Swatches.Main());
                this.MergedDictionaries.Add(new Telerik.Theming.Default.Variables());
                break;
            case "Default-Main-Dark":
                this.MergedDictionaries.Add(new Telerik.Theming.Default.Swatches.MainDark());
                this.MergedDictionaries.Add(new Telerik.Theming.Default.Variables());
                break;
            case "Fluent-Main":
                this.MergedDictionaries.Add(new Telerik.Theming.Fluent.Swatches.Main());
                this.MergedDictionaries.Add(new Telerik.Theming.Fluent.Variables());
                break;
            case "Fluent-Main-Dark":
                this.MergedDictionaries.Add(new Telerik.Theming.Fluent.Swatches.MainDark());
                this.MergedDictionaries.Add(new Telerik.Theming.Fluent.Variables());
                break;
            case "Material-Main":
                this.MergedDictionaries.Add(new Telerik.Theming.Material.Swatches.Main());
                this.MergedDictionaries.Add(new Telerik.Theming.Material.Variables());
                break;
            case "Material-Main-Dark":
                this.MergedDictionaries.Add(new Telerik.Theming.Material.Swatches.MainDark());
                this.MergedDictionaries.Add(new Telerik.Theming.Material.Variables());
                break;
            default:
                throw new Exception($"Theme not available, key: {this.Theme}");
        }

        // Load control styles
        if (this.Theme.Theme == "Platform")
        {
            // Use the built-in XAML styles
        }
        else
        {
            this.MergedDictionaries.Add(new Telerik.Theming.Styles.Core());
            this.MergedDictionaries.Add(new Telerik.Theming.Styles.DataGrid());
            this.MergedDictionaries.Add(new Telerik.Theming.Styles.Scheduler());
        }
    }

    public class ThemeKey
    {
        public string Theme { get; private set; }
        public string Swatch { get; private set; }
        public string FullName => $"{this.Theme}-{this.Swatch}";

        public ThemeKey(string theme, string swatch)
        {
            this.Theme = theme;
            this.Swatch = swatch;
        }

        public override string ToString() => this.FullName;
    }
}